/*
 * Copyright (C) 2016 Lucien XU <sfietkonstantin@free.fr>
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * The names of its contributors may not be used to endorse or promote
 *     products derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 */

// This file is autogenerated by microgen.py

#include "${name.lower()}requestfactory.h"
#include <QJsonObject>
#include <QJsonValue>

using namespace ::microcore::core;
using namespace ::microcore::error;

namespace microcore { namespace ${module} {

class ${name}RequestJob final : public ${name}Job
{
public:
    explicit ${name}RequestJob(${name}Request &&request)
        : m_request(std::move(request))
    {
    }
    void execute(OnResult_t onResult, OnError_t onError) override
    {
        QJsonObject root {m_request.object()};
        % for object in object_tree:
        QJsonObject ${object[0]} {${object[1]}.value(QLatin1String("${object[2]}")).toObject()};
        % endfor
        
        % for property in properties:
        if (!${property["json_object"]}.contains(QLatin1String("${property["json_key"]}"))) {
            onError(Error("${module}_${name.lower()}", 
                          QLatin1String("${property["json_path"]} cannot be found"), 
                          m_request.toJson(QJsonDocument::Compact)));
        }
        % endfor
        onResult(${name}Result(
            % for i, property in enumerate(properties):
            % if i != len(properties) - 1:
            ${property["json_object"]}.value(QLatin1String("${property["json_key"]}")).${property["conversion_method"]}(),
            % else:
            ${property["json_object"]}.value(QLatin1String("${property["json_key"]}")).${property["conversion_method"]}()
            % endif
            % endfor
        ));
    }
private:
    ${name}Request m_request {};
};

std::unique_ptr<${name}Job> ${name}RequestFactory::create(${name}Request &&request) const
{
    return std::unique_ptr<${name}Job>(new ${name}RequestJob(std::move(request)));
}

}}
